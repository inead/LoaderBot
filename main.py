import logging
import gspread
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import F
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, time, timedelta
import pytz
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "–¢–û–ö–ï–ù_–ë–û–¢–ê"
USERS_SHEET_NAME = "–¢–ê–ë–õ–ò–¶–ê_–ë–ê–ó–´–î–ê–ù–ù–´–•"
SHIFTS_SHEET_NAME = "–¢–ê–ë–õ–ò–¶–ê_–†–ê–ë–û–ß–ò–•_–í–´–®–ï–®–ò–•_–ù–ê_–°–ú–ï–ù–£"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("–ü–£–¢–¨/–î–û/–§–ê–ô–õ–ê/credentials.json", scope)
client = gspread.authorize(creds)
users_sheet = client.open(USERS_SHEET_NAME).sheet1
shifts_sheet = client.open(SHIFTS_SHEET_NAME).sheet1

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–ú–°–ö)
MSK_TZ = pytz.timezone("Europe/Moscow")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_keyboard = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")]],
    resize_keyboard=True
)
register_keyboard = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton(text="–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–º")]],
    resize_keyboard=True
)
agree_keyboard = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton(text="‚úÖ –Ø –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω –∏ —Å–æ–≥–ª–∞—Å–µ–Ω")]],
    resize_keyboard=True
)
main_keyboard = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton(text="–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É")]],
    resize_keyboard=True,
)
shift_keyboard = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É")]],
    resize_keyboard=True,
)

# –†–µ–≥–ª–∞–º–µ–Ω—Ç
REGULATIONS = """
–†–µ–≥–ª–∞–º–µ–Ω—Ç:...
"""


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Registration(StatesGroup):
    awaiting_agreement = State()
    full_name = State()
    requisites = State()
    bank = State()
    recipient = State()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def is_registered(user_id):
    try:
        records = users_sheet.get_all_values()
        return any(row[0] == str(user_id) for row in records)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã
def has_active_shift(full_name):
    records = shifts_sheet.get_all_values()
    return any(row[2] == full_name and not row[7] for row in records)


# –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É
def can_start_shift(full_name):
    try:
        records = shifts_sheet.get_all_values()
        today_date = datetime.now(MSK_TZ).strftime("%Y-%m-%d")
        now_time = datetime.now(MSK_TZ).time()  # –í—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞

        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã –¥–ª—è {full_name} –Ω–∞ –¥–∞—Ç—É {today_date} –≤ {now_time}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–º–µ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ–≥–æ–¥–Ω—è
        for row in records:
            if row[2] == full_name and row[1] == today_date and not row[7]:
                logging.info(f"–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ –¥–ª—è {full_name} —Å–µ–≥–æ–¥–Ω—è.")
                return False  # –°–º–µ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è

        # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 6 —É—Ç—Ä–∞
        # if now_time < time(6, 0):
        #     logging.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {now_time} –º–µ–Ω—å—à–µ 6:00. –°–º–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—á–∞—Ç–∞.")
        #     return False  # –°–º–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—á–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 6:00

        logging.info(f"–°–º–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—á–∞—Ç–∞ –¥–ª—è {full_name}.")
        return True  # –°–º–µ–Ω–∞ –µ—â—ë –Ω–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ can_start_shift: {e}")
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤
def calculate_and_update_worked_hours():
    try:
        records = shifts_sheet.get_all_values()

        for i, row in enumerate(records):
            if row[7]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–µ—Å—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è)
                start_time = datetime.strptime(row[6], "%H:%M:%S").time()  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
                end_time = datetime.strptime(row[7], "%H:%M:%S").time()  # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ datetime –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
                start_datetime = datetime.combine(datetime.today(), start_time)
                end_datetime = datetime.combine(datetime.today(), end_time)

                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –Ω–∞—á–∞–ª–∞
                shift_duration = end_datetime - start_datetime

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
                total_seconds = int(shift_duration.total_seconds())
                hours = total_seconds // 3600
                minutes = (total_seconds % 3600) // 60

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç—Ä–æ–∫—É "—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã"
                worked_hours = f"{hours}:{minutes:02d}"

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "I" (–¥–µ–≤—è—Ç—ã–π —Å—Ç–æ–ª–±–µ—Ü) –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
                shifts_sheet.update_cell(i + 1, 9, worked_hours)

        logging.info("–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤: {e}")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É Bot-test
def add_shift_to_bot_test(full_name, start_time, end_time, requisites, bank, recipient):
    try:
        next_row = len(shifts_sheet.get_all_values()) + 1
        now_date = datetime.now(MSK_TZ).strftime("%Y-%m-%d")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
        shifts_sheet.append_row([
            next_row,  # –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (A)
            now_date,  # –î–∞—Ç–∞ (B)
            full_name,  # –§–ò–û (C)
            "",  # –ü—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü (D)
            "",  # –ü—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü (E)
            "",  # –ü—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü (F)
            start_time,  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã (G)
            end_time,  # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã (H)
            "",  # –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—ã (I) ‚Äî –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ
            "",  # –ü—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü (J)
            "",  # –ü—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü (K)
            "",  # –ü—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü (L)
            "",  # –ü—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü (M)
            requisites,  # –†–µ–∫–≤–∏–∑–∏—Ç—ã (N)
            bank,  # –ë–∞–Ω–∫ (O)
            recipient  # –ü–æ–ª—É—á–∞—Ç–µ–ª—å (P)
        ])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É Bot-test: {e}")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É PersonData
def add_user_to_person_data(user_id, full_name, requisites, bank, recipient):
    try:
        users_sheet.append_row([str(user_id), full_name, requisites, bank, recipient])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=start_keyboard)


@dp.message(F.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
async def handle_start_button(message: types.Message):
    user_id = message.from_user.id
    if is_registered(user_id):
        await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É", reply_markup=main_keyboard)
    else:
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–º", reply_markup=register_keyboard)


@dp.message(F.text == "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–º")
async def show_regulations(message: types.Message, state: FSMContext):
    await state.set_state(Registration.awaiting_agreement)  # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è
    await message.answer(
        REGULATIONS,  # –¢–µ–∫—Å—Ç —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞
        reply_markup=agree_keyboard  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    )


@dp.message(F.text == "‚úÖ –Ø –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω –∏ —Å–æ–≥–ª–∞—Å–µ–Ω", Registration.awaiting_agreement)
async def agree_regulations(message: types.Message, state: FSMContext):
    await state.set_state(Registration.full_name)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —à–∞–≥–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=types.ReplyKeyboardRemove())


@dp.message(Registration.full_name)
async def register_full_name(message: types.Message, state: FSMContext):
    full_name = message.text.strip()
    if not full_name:
        await message.answer("‚ö†Ô∏è –§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û.")
        return
    await state.update_data(full_name=full_name)
    await state.set_state(Registration.requisites)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –±–∞–Ω–∫–∞:")


@dp.message(Registration.requisites)
async def register_requisites(message: types.Message, state: FSMContext):
    requisites = message.text.strip()
    if not requisites:
        await message.answer("‚ö†Ô∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.")
        return
    await state.update_data(requisites=requisites)
    await state.set_state(Registration.bank)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:")


@dp.message(Registration.bank)
async def register_bank(message: types.Message, state: FSMContext):
    bank = message.text.strip()
    if not bank:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞.")
        return
    await state.update_data(bank=bank)
    await state.set_state(Registration.recipient)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")


@dp.message(Registration.recipient)
async def register_recipient(message: types.Message, state: FSMContext):
    recipient = message.text.strip()
    if not recipient:
        await message.answer("‚ö†Ô∏è –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        return

    user_data = await state.get_data()
    user_id = message.from_user.id
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É PersonData
    add_user_to_person_data(user_id, user_data["full_name"], user_data["requisites"], user_data["bank"], recipient)

    await state.clear()
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())
    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã.", reply_markup=main_keyboard)


@dp.message(F.text == "–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É")
async def start_shift(message: types.Message):
    user_id = message.from_user.id
    row_number = users_sheet.find(str(user_id)).row
    user_data = users_sheet.row_values(row_number)
    full_name = user_data[1]
    now = datetime.now(MSK_TZ).strftime("%H:%M:%S")
    today_date = datetime.now(MSK_TZ).strftime("%Y-%m-%d")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É
    if not can_start_shift(full_name):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É. –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞.",
            reply_markup=main_keyboard
        )
        return

    # –ï—Å–ª–∏ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Ç–∞–±–ª–∏—Ü—É
    try:
        add_shift_to_bot_test(
            full_name=full_name,
            start_time=now,
            end_time="",  # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ
            requisites=user_data[2],  # –†–µ–∫–≤–∏–∑–∏—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã PersonData
            bank=user_data[3],  # –ë–∞–Ω–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã PersonData
            recipient=user_data[4]  # –ü–æ–ª—É—á–∞—Ç–µ–ª—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã PersonData
        )
        await message.answer("üïí –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞", reply_markup=shift_keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É")
async def end_shift(message: types.Message):
    user_id = message.from_user.id
    row_number = users_sheet.find(str(user_id)).row
    user_data = users_sheet.row_values(row_number)
    now = datetime.now(MSK_TZ).strftime("%H:%M:%S")

    records = shifts_sheet.get_all_values()
    for i in range(len(records) - 1, 0, -1):
        if records[i][2] == user_data[1] and not records[i][7]:  # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã (—Å—Ç–æ–ª–±–µ—Ü H)
            shifts_sheet.update_cell(i + 1, 8, now)

            # –í—ã—á–∏—Å–ª—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—ã (—Å—Ç–æ–ª–±–µ—Ü I)
            calculate_and_update_worked_hours()

            await message.answer("‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=main_keyboard)
            return
    await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω.")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
